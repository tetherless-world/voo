# -*- config:utf-8 -*-
from whyis import autonomic, importer
from VirtualOntologyObservatory.agent import *


SITE_NAME = "Virtual Ontology Observatory"
SITE_DESCRIPTION = 'A knowledge graph.'
LOD_PREFIX = 'http://purl.org/whyis/voo'
SECURITY_EMAIL_SENDER = "Whyis <changeme@example.com>"
DEFAULT_LANGUAGE = 'en'
BASE_RATE_PROBABILITY = 0.5
VOCAB_FILE = "vocab.ttl"

CELERYD_SOFT_TIME_LIMIT = 3600

# EMAIL CONFIGURATION
## MAIL_SERVER = "",
## MAIL_PORT = 587,
## MAIL_USE_TLS = True,
## MAIL_USE_SSL = False,
## MAIL_DEBUG = False,
## MAIL_USERNAME = '',
## MAIL_PASSWORD = '',
## DEFAULT_MAIL_SENDER = "Whyis <changeme@example.com>",

EXPLAIN_TEMPLATE_LOADING=True

bioportal_api_key=os.getenv('BIOPORTAL_API_KEY')

NAMESPACES = [
#    importer.FileImporter(
#	prefix = LOD_PREFIX+'/bioportal_api/',
#	url = 'http://data.bioontology.org/%s',
#	access_url = '%s?apikey='+bioportal_api_key
#    ),
#    importer.LinkedData(
#        prefix = LOD_PREFIX+'/doi/',
#        url = 'http://dx.doi.org/%s',
#        headers={'Accept':'text/turtle'},
#        format='turtle',
#        postprocess_update= '''insert {
#            graph ?g {
#                ?pub a <http://purl.org/ontology/bibo/AcademicArticle>.
#            }
#        } where {
#            graph ?g {
#                ?pub <http://purl.org/ontology/bibo/doi> ?doi.
#            }
#        }
#        '''
#    ),
#    importer.LinkedData(
#        prefix = LOD_PREFIX+'/dbpedia/',
#        url = 'http://dbpedia.org/resource/%s',
#        headers={'Accept':'text/turtle'},
#        format='turtle',
#        postprocess_update= '''insert {
#            graph ?g {
#                ?article <http://purl.org/dc/terms/abstract> ?abstract.
#            }
#        } where {
#            graph ?g {
#                ?article <http://dbpedia.org/ontology/abstract> ?abstract.
#            }
#        }
#        '''
#    )
]

INFERENCERS = {
#    "SETLr": autonomic.SETLr(),
#    "SETLMaker": autonomic.SETLMaker(),
#    "SDDAgent": autonomic.SDDAgent(),
#    "OntologyImporter" : OntologyImporter(),
#    "ExtractOntologies":ExtractOntologies(),
#    "LoadOntology": LoadOntology(),
#    "ExtractOntologyURINamespace": ExtractOntologyURINamespace(),
#    "LinkQuotedOntologies" : LinkQuotedOntologies()
}

INFERENCE_TASKS = [
]
